
--------gist---------


------------------
dependency injection is possible in spring coz spring behaves as container of beans . 
a container is something that contains the object . tomcat is a container as it contains servlet objects. 
tomcat checks the xml file ,searches for servlet and instantiates them.
 
spring is also similar.spring is container of beans. the classes that we configure in spring.xml as bean,they are loaded and contained by spring container.



we configure the classes in bean tag and we configure that class's dependencies in property tag inside that class's bean's tag.
by default Application context reads and creates bean objects even before it is get by some other obejct.

---basic bean scopes:
1)Singleton-only once per Spring container- spring will look for bean defination in spring.xml and create only one object for each defination and then Spring container returns the same obeject
			for subsequent getBean call,it will not create new obejct. 
2) Prototype- New bean craeted with every request

--web aware Context Bean scopes

Request- New Bean per sevlet request
session-new bean per session
 
----
for we application,spring know when to shutdown its context,but for desktop appliactions,spring doesnot,so we need to use another class i.e AbstractApplicationContext and we need to 
register its shutdown hook	.
 
--- lifecycle and callbacks---
we can use lifecycle methods like init and destroy in two ways.first one being the interfaces like InitializingBean and second one by mentioning the lifecycle methods in spring.xml as value
in init-method attribute in Bean tag. if we want at global level i.e all beans have commmon name   for lifecycle methods,we can mention them in Beans tag as default-init-methods and default-
destroy-method. but the methods given by interfaces are called before the one we configured in spring.xml

---bean post processors---
these are the classes that can do some processing after initializing the beans.we can make this class by implemeting BeanPostProcessor which has to methods i.e postProcessAfterInitialization
and postProcessBeforeInitialization. they will be called for all the beans defined in spring.xml. spring passes two agrument in this methods i.e the bean object and bean name.theses two
methods return a object which must be the bean objects that were passes in.we can do some processing after recieving and then we can return them back.
we also need to configure this class in spring.xml as value in class attribute in bean tag.
 
there are many post processors which act after various activities.we just need to configure them in spring.xml

video16
---beanFactoryPostProcessor---
we can make a class beanFactoryPostProcessor by implemeting BeanFactoryPostProcessor interface.it can do processing for bean factory before initialization.
we need to implement its method: postProcessBeanFactory() which takes the argument of beanFactory itself.we can recieve it and process it and need not return it. we need to configure it
in spring.xml as value for class attribute in bean tag.

---	propertyPlaceholderConfigurer---
we can use it to pickup values from property file and supply in spring.xml .  

video17
---coding by interfaces--
we must make our bean classes implement  a common interface by which we can unleash the tue power of spring.
for eg. we have a bean class Traingle and we have confugured it in spring.xml. we now get the object by getBean. suppose we now want a circle object,then we have to change the code
in main method.so what we can do is we can make both circle and triangle class implement a interface Shape. now we can collect the obejct by getbean in Shape instance . we must configure
both circle and traingle class in spring.xml. now we can get any object into shape object by channging the id name in spring.xml. thus we need not hard code the class in main method.

video18
-- @Required Annotation

if we dont configure dependency in spring.xml and we use it in the class,then we may get null pointer exception.there may be case that we get this exception after a long time after code
is deployed and we may suufer huge loss.so its better to know such flaws at time of deployment.we can do it by Required annotation.we can place the @Required on the top 
of the setter of that property .then we must configure the class RequiredAnnotation class in spring.xml. now immediatly after we execute,spring checks if the dependency was initialized by
its setter and if not,exception is thrown .so we come to know the flaws after execution i.e even before main method is run.
 
video19
--- autowire annotation

video20
annotations - Resource,postinitailization,predestroy

video21
@component-to declare a class as bean
@Service, @Repository, @Controller

video22
using Messagesource to get text from property files 

video23
  
  